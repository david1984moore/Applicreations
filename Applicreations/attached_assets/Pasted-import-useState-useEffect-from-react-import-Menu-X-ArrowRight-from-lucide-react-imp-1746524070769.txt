import { useState, useEffect } from "react";
import { Menu, X, ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import logoPath from "../assets/logo.png";

export default function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [activeLink, setActiveLink] = useState("home");

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const closeMenu = () => {
    setIsMenuOpen(false);
  };

  // Handle scroll event to add shadow when scrolled and update active link
  useEffect(() => {
    const handleScroll = () => {
      // For navbar shadow
      if (window.scrollY > 10) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }

      // For active link highlighting based on scroll position
      const sections = document.querySelectorAll("section[id]");
      sections.forEach((section) => {
        // Force type assertion to HTMLElement to access offsetTop and offsetHeight
        const htmlSection = section as HTMLElement;
        const sectionTop = htmlSection.offsetTop - 100;
        const sectionHeight = htmlSection.offsetHeight;
        const sectionId = section.getAttribute("id") || "";

        if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
          setActiveLink(sectionId);
        }
      });
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  const navLinks = [
    { name: "Home", href: "#home", id: "home", color: "primary" },
    { name: "Services", href: "#services", id: "services", color: "purple" },
    { name: "Contact", href: "#contact", id: "contact", color: "primary" },
  ];

  return (
    <header 
      className={`fixed w-full top-0 z-50 transition-all duration-200 ${
        isScrolled 
          ? "bg-white shadow-sm py-2 border-b border-border/50" 
          : "bg-white py-3"
      }`}
    >
      <nav className="container mx-auto px-4 md:px-6 lg:px-8">
        <div className="flex justify-between items-center">
          {/* Logo */}
          <a href="#home" className="flex items-center">
            <img src={logoPath} alt="Applicreations logo" className="h-8" />
          </a>
          
          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center">
            {navLinks.map((link) => (
              <a 
                key={link.name}
                href={link.href} 
                className={`px-4 py-1 text-sm transition-colors relative ${
                  activeLink === link.id
                    ? `text-${link.color} font-medium`
                    : `text-foreground/70 hover:text-${link.color}`
                }`}
              >
                {link.name}
              </a>
            ))}
            <Button 
              asChild
              size="sm"
              variant="default"
              className="ml-4 bg-purple hover:bg-purple/90 text-white rounded-md px-4 py-1 text-sm shadow-purple-glow"
            >
              <a href="#contact">
                Contact Us
              </a>
            </Button>
          </div>
          
          {/* Mobile Navigation Toggle */}
          <button 
            onClick={toggleMenu}
            className="md:hidden text-foreground focus:outline-none" 
            aria-label="Menu"
          >
            {isMenuOpen ? <X size={20} /> : <Menu size={20} />}
          </button>
        </div>
        
        {/* Mobile Navigation Menu */}
        {isMenuOpen && (
          <div className="md:hidden mt-4 border-t border-border pt-4 pb-4">
            <div className="flex flex-col space-y-3">
              {navLinks.map((link) => (
                <a 
                  key={link.name}
                  href={link.href} 
                  className={`py-2 text-sm ${
                    activeLink === link.id
                      ? `text-${link.color} font-medium`
                      : `text-foreground/70 hover:text-${link.color}`
                  }`}
                  onClick={closeMenu}
                >
                  {link.name}
                </a>
              ))}
              <div className="mt-4 pt-4 border-t border-border">
                <Button 
                  asChild
                  className="w-full bg-purple hover:bg-purple/90 text-white rounded-md text-sm shadow-purple-glow"
                >
                  <a href="#contact" onClick={closeMenu}>
                    Contact Us
                  </a>
                </Button>
              </div>
            </div>
          </div>
        )}
      </nav>
    </header>
  );
}
